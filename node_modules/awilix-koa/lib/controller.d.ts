/// <reference types="koa__router" />
import { Middleware } from 'koa';
import { IOptions } from 'glob';
import { IAwilixControllerBuilder } from 'awilix-router-core';
import Router from '@koa/router';
/**
 * Constructor type.
 */
export type ConstructorOrControllerBuilder = (new (...args: Array<any>) => any) | IAwilixControllerBuilder;
export interface InstanceOptions {
    singleton?: boolean;
}
/**
 * Registers one or multiple decorated controller classes.
 *
 * @param ControllerClass One or multiple "controller" classes
 *        with decorators to register
 * @param options
 */
export declare function controller(ControllerClass: ConstructorOrControllerBuilder | Array<ConstructorOrControllerBuilder>, options?: InstanceOptions): Middleware;
/**
 * Imports and prepares controllers for the given pattern, applying them to the supplied router
 *
 * @param router
 * @param pattern
 * @param globOptions
 * @param options
 */
export declare function importControllers(router: Router, pattern: string, globOptions?: IOptions, options?: InstanceOptions): void;
/**
 * Loads controllers for the given pattern and returns a koa-compose'd Middleware
 * This return value must be used with `Koa.use`, and is incompatible with `Router.use`
 *
 * @param pattern
 * @param globOptions
 * @param router
 * @param options
 */
export declare function loadControllers(pattern: string, globOptions?: IOptions, router?: Router, options?: InstanceOptions): Middleware;
