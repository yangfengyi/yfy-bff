"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadControllers = exports.importControllers = exports.controller = void 0;
var awilix_router_core_1 = require("awilix-router-core");
var invokers_1 = require("./invokers");
var koa_compose_1 = __importDefault(require("koa-compose"));
var router_1 = __importDefault(require("@koa/router"));
/**
 * Registers one or multiple decorated controller classes.
 *
 * @param ControllerClass One or multiple "controller" classes
 *        with decorators to register
 * @param options
 */
function controller(ControllerClass, options) {
    var router = new router_1.default();
    if (Array.isArray(ControllerClass)) {
        ControllerClass.forEach(function (c) {
            return _registerController(router, options, (0, awilix_router_core_1.getStateAndTarget)(c));
        });
    }
    else {
        _registerController(router, options, (0, awilix_router_core_1.getStateAndTarget)(ControllerClass));
    }
    return (0, koa_compose_1.default)([router.routes(), router.allowedMethods()]);
}
exports.controller = controller;
/**
 * Imports and prepares controllers for the given pattern, applying them to the supplied router
 *
 * @param router
 * @param pattern
 * @param globOptions
 * @param options
 */
function importControllers(router, pattern, globOptions, options) {
    (0, awilix_router_core_1.findControllers)(pattern, __assign(__assign({}, globOptions), { absolute: true })).forEach(_registerController.bind(null, router, options));
}
exports.importControllers = importControllers;
/**
 * Loads controllers for the given pattern and returns a koa-compose'd Middleware
 * This return value must be used with `Koa.use`, and is incompatible with `Router.use`
 *
 * @param pattern
 * @param globOptions
 * @param router
 * @param options
 */
function loadControllers(pattern, globOptions, router, options) {
    var r = router || new router_1.default();
    importControllers(r, pattern, globOptions, options);
    return (0, koa_compose_1.default)([r.routes(), r.allowedMethods()]);
}
exports.loadControllers = loadControllers;
/**
 * Reads the config state and registers the routes in the router.
 *
 * @param router
 * @param options
 * @param ControllerClass
 */
function _registerController(router, options, stateAndTarget) {
    if (!stateAndTarget) {
        return;
    }
    var state = stateAndTarget.state, target = stateAndTarget.target;
    var invoker = (0, invokers_1.makeInvoker)(target, { lifetime: (options === null || options === void 0 ? void 0 : options.singleton) ? 'SINGLETON' : 'SCOPED' });
    var rolledUp = (0, awilix_router_core_1.rollUpState)(state);
    rolledUp.forEach(function (methodCfg, methodName) {
        methodCfg.verbs.forEach(function (httpVerb) {
            var method = httpVerb.toLowerCase();
            if (httpVerb === awilix_router_core_1.HttpVerbs.ALL) {
                method = 'all';
            }
            // This should be safe since the router exposes methods for all the HTTP verbs.
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            router[method].apply(router, __spreadArray(__spreadArray(__spreadArray([methodCfg.paths], methodCfg.beforeMiddleware, false), [invoker(methodName)], false), methodCfg.afterMiddleware, false));
        });
    });
}
//# sourceMappingURL=controller.js.map